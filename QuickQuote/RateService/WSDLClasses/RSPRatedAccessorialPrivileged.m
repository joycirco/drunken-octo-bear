/*
	RSPRatedAccessorialPrivileged.h
	The implementation of properties and methods for the RSPRatedAccessorialPrivileged object.
	Generated by SudzC.com
*/
#import "RSPRatedAccessorialPrivileged.h"

@implementation RSPRatedAccessorialPrivileged
	@synthesize accCode = _accCode;
	@synthesize accDescription = _accDescription;
	@synthesize accCostRateQualifier = _accCostRateQualifier;
	@synthesize accChargeRateQualifier = _accChargeRateQualifier;
	@synthesize accRate = _accRate;
	@synthesize accIsMin = _accIsMin;
	@synthesize accIsMax = _accIsMax;
	@synthesize accCharge = _accCharge;
	@synthesize accCost = _accCost;

	- (id) init
	{
		if(self = [super init])
		{
			self.accCode = nil;
			self.accDescription = nil;
			self.accCostRateQualifier = nil;
			self.accChargeRateQualifier = nil;
			self.accRate = nil;
			self.accCharge = nil;
			self.accCost = nil;

		}
		return self;
	}

	+ (RSPRatedAccessorialPrivileged*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[self alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.accCode = [Soap getNodeValue: node withName: @"accCode"];
			self.accDescription = [Soap getNodeValue: node withName: @"accDescription"];
			self.accCostRateQualifier = [Soap getNodeValue: node withName: @"accCostRateQualifier"];
			self.accChargeRateQualifier = [Soap getNodeValue: node withName: @"accChargeRateQualifier"];
			self.accRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"accRate"]];
			self.accIsMin = [[Soap getNodeValue: node withName: @"accIsMin"] boolValue];
			self.accIsMax = [[Soap getNodeValue: node withName: @"accIsMax"] boolValue];
			self.accCharge = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"accCharge"]];
			self.accCost = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"accCost"]];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RatedAccessorialPrivileged"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.accCode != nil) [s appendFormat: @"<accCode>%@</accCode>", [[self.accCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.accDescription != nil) [s appendFormat: @"<accDescription>%@</accDescription>", [[self.accDescription stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.accCostRateQualifier != nil) [s appendFormat: @"<accCostRateQualifier>%@</accCostRateQualifier>", [[self.accCostRateQualifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.accChargeRateQualifier != nil) [s appendFormat: @"<accChargeRateQualifier>%@</accChargeRateQualifier>", [[self.accChargeRateQualifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.accRate != nil) [s appendFormat: @"<accRate>%@</accRate>", [NSString stringWithFormat: @"%@", self.accRate]];
		[s appendFormat: @"<accIsMin>%@</accIsMin>", (self.accIsMin)?@"true":@"false"];
		[s appendFormat: @"<accIsMax>%@</accIsMax>", (self.accIsMax)?@"true":@"false"];
		if (self.accCharge != nil) [s appendFormat: @"<accCharge>%@</accCharge>", [NSString stringWithFormat: @"%@", self.accCharge]];
		if (self.accCost != nil) [s appendFormat: @"<accCost>%@</accCost>", [NSString stringWithFormat: @"%@", self.accCost]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RSPRatedAccessorialPrivileged class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
