/*
	RSPPricingAccessorial.h
	The implementation of properties and methods for the RSPPricingAccessorial object.
	Generated by SudzC.com
*/
#import "RSPPricingAccessorial.h"

@implementation RSPPricingAccessorial
	@synthesize pricing_accessorial_pk = _pricing_accessorial_pk;
	@synthesize cust_id = _cust_id;
	@synthesize accessorial_code = _accessorial_code;
	@synthesize markup_percent = _markup_percent;
	@synthesize markup_dollar = _markup_dollar;
	@synthesize min_percent = _min_percent;
	@synthesize min_dollar = _min_dollar;
	@synthesize max_percent = _max_percent;
	@synthesize max_dollar = _max_dollar;
	@synthesize markup_percent_applies = _markup_percent_applies;
	@synthesize min_percent_applies = _min_percent_applies;
	@synthesize max_percent_applies = _max_percent_applies;
	@synthesize min_limit_enabled = _min_limit_enabled;
	@synthesize max_limit_enabled = _max_limit_enabled;
	@synthesize org_id = _org_id;
	@synthesize active = _active;
	@synthesize is_override = _is_override;

	- (id) init
	{
		if(self = [super init])
		{
			self.accessorial_code = nil;
			self.markup_percent = nil;
			self.markup_dollar = nil;
			self.min_percent = nil;
			self.min_dollar = nil;
			self.max_percent = nil;
			self.max_dollar = nil;

		}
		return self;
	}

	+ (RSPPricingAccessorial*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[self alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.pricing_accessorial_pk = [[Soap getNodeValue: node withName: @"pricing_accessorial_pk"] intValue];
			self.cust_id = [[Soap getNodeValue: node withName: @"cust_id"] intValue];
			self.accessorial_code = [Soap getNodeValue: node withName: @"accessorial_code"];
			self.markup_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"markup_percent"]];
			self.markup_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"markup_dollar"]];
			self.min_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"min_percent"]];
			self.min_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"min_dollar"]];
			self.max_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"max_percent"]];
			self.max_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"max_dollar"]];
			self.markup_percent_applies = [[Soap getNodeValue: node withName: @"markup_percent_applies"] boolValue];
			self.min_percent_applies = [[Soap getNodeValue: node withName: @"min_percent_applies"] boolValue];
			self.max_percent_applies = [[Soap getNodeValue: node withName: @"max_percent_applies"] boolValue];
			self.min_limit_enabled = [[Soap getNodeValue: node withName: @"min_limit_enabled"] boolValue];
			self.max_limit_enabled = [[Soap getNodeValue: node withName: @"max_limit_enabled"] boolValue];
			self.org_id = [[Soap getNodeValue: node withName: @"org_id"] intValue];
			self.active = [[Soap getNodeValue: node withName: @"active"] boolValue];
			self.is_override = [[Soap getNodeValue: node withName: @"is_override"] boolValue];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"PricingAccessorial"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<pricing_accessorial_pk>%@</pricing_accessorial_pk>", [NSString stringWithFormat: @"%i", self.pricing_accessorial_pk]];
		[s appendFormat: @"<cust_id>%@</cust_id>", [NSString stringWithFormat: @"%i", self.cust_id]];
		if (self.accessorial_code != nil) [s appendFormat: @"<accessorial_code>%@</accessorial_code>", [[self.accessorial_code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.markup_percent != nil) [s appendFormat: @"<markup_percent>%@</markup_percent>", [NSString stringWithFormat: @"%@", self.markup_percent]];
		if (self.markup_dollar != nil) [s appendFormat: @"<markup_dollar>%@</markup_dollar>", [NSString stringWithFormat: @"%@", self.markup_dollar]];
		if (self.min_percent != nil) [s appendFormat: @"<min_percent>%@</min_percent>", [NSString stringWithFormat: @"%@", self.min_percent]];
		if (self.min_dollar != nil) [s appendFormat: @"<min_dollar>%@</min_dollar>", [NSString stringWithFormat: @"%@", self.min_dollar]];
		if (self.max_percent != nil) [s appendFormat: @"<max_percent>%@</max_percent>", [NSString stringWithFormat: @"%@", self.max_percent]];
		if (self.max_dollar != nil) [s appendFormat: @"<max_dollar>%@</max_dollar>", [NSString stringWithFormat: @"%@", self.max_dollar]];
		[s appendFormat: @"<markup_percent_applies>%@</markup_percent_applies>", (self.markup_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<min_percent_applies>%@</min_percent_applies>", (self.min_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<max_percent_applies>%@</max_percent_applies>", (self.max_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<min_limit_enabled>%@</min_limit_enabled>", (self.min_limit_enabled)?@"true":@"false"];
		[s appendFormat: @"<max_limit_enabled>%@</max_limit_enabled>", (self.max_limit_enabled)?@"true":@"false"];
		[s appendFormat: @"<org_id>%@</org_id>", [NSString stringWithFormat: @"%i", self.org_id]];
		[s appendFormat: @"<active>%@</active>", (self.active)?@"true":@"false"];
		[s appendFormat: @"<is_override>%@</is_override>", (self.is_override)?@"true":@"false"];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RSPPricingAccessorial class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
