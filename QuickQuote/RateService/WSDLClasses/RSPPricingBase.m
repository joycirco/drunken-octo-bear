/*
	RSPPricingBase.h
	The implementation of properties and methods for the RSPPricingBase object.
	Generated by SudzC.com
*/
#import "RSPPricingBase.h"

#import "RSPEffectivePricing.h"
@implementation RSPPricingBase
	@synthesize cust_id = _cust_id;
	@synthesize contract_id = _contract_id;
	@synthesize active = _active;
	@synthesize benchmark = _benchmark;
	@synthesize analysis = _analysis;
	@synthesize standard_markup_percent = _standard_markup_percent;
	@synthesize standard_markup_dollar = _standard_markup_dollar;
	@synthesize flat_markup_percent = _flat_markup_percent;
	@synthesize flat_markup_dollar = _flat_markup_dollar;
	@synthesize min_markup_percent = _min_markup_percent;
	@synthesize min_markup_dollar = _min_markup_dollar;
	@synthesize max_markup_percent = _max_markup_percent;
	@synthesize max_markup_dollar = _max_markup_dollar;
	@synthesize standard_markup_percent_applies = _standard_markup_percent_applies;
	@synthesize flat_markup_percent_applies = _flat_markup_percent_applies;
	@synthesize min_markup_percent_applies = _min_markup_percent_applies;
	@synthesize max_markup_percent_applies = _max_markup_percent_applies;
	@synthesize contract_pricing_applies = _contract_pricing_applies;
	@synthesize min_markup_limit_enabled = _min_markup_limit_enabled;
	@synthesize max_markup_limit_enabled = _max_markup_limit_enabled;
	@synthesize org_id = _org_id;
	@synthesize scac = _scac;
	@synthesize min_margin = _min_margin;
	@synthesize max_margin = _max_margin;
	@synthesize weight_break_low = _weight_break_low;
	@synthesize weight_break_high = _weight_break_high;
	@synthesize effectivePricing = _effectivePricing;

	- (id) init
	{
		if(self = [super init])
		{
			self.standard_markup_percent = nil;
			self.standard_markup_dollar = nil;
			self.flat_markup_percent = nil;
			self.flat_markup_dollar = nil;
			self.min_markup_percent = nil;
			self.min_markup_dollar = nil;
			self.max_markup_percent = nil;
			self.max_markup_dollar = nil;
			self.scac = nil;
			self.min_margin = nil;
			self.max_margin = nil;
			self.weight_break_low = nil;
			self.weight_break_high = nil;
			self.effectivePricing = nil; // [[RSPEffectivePricing alloc] init];

		}
		return self;
	}

	+ (RSPPricingBase*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[self alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.cust_id = [[Soap getNodeValue: node withName: @"cust_id"] intValue];
			self.contract_id = [[Soap getNodeValue: node withName: @"contract_id"] intValue];
			self.active = [[Soap getNodeValue: node withName: @"active"] boolValue];
			self.benchmark = [[Soap getNodeValue: node withName: @"benchmark"] boolValue];
			self.analysis = [[Soap getNodeValue: node withName: @"analysis"] boolValue];
			self.standard_markup_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"standard_markup_percent"]];
			self.standard_markup_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"standard_markup_dollar"]];
			self.flat_markup_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"flat_markup_percent"]];
			self.flat_markup_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"flat_markup_dollar"]];
			self.min_markup_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"min_markup_percent"]];
			self.min_markup_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"min_markup_dollar"]];
			self.max_markup_percent = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"max_markup_percent"]];
			self.max_markup_dollar = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"max_markup_dollar"]];
			self.standard_markup_percent_applies = [[Soap getNodeValue: node withName: @"standard_markup_percent_applies"] boolValue];
			self.flat_markup_percent_applies = [[Soap getNodeValue: node withName: @"flat_markup_percent_applies"] boolValue];
			self.min_markup_percent_applies = [[Soap getNodeValue: node withName: @"min_markup_percent_applies"] boolValue];
			self.max_markup_percent_applies = [[Soap getNodeValue: node withName: @"max_markup_percent_applies"] boolValue];
			self.contract_pricing_applies = [[Soap getNodeValue: node withName: @"contract_pricing_applies"] boolValue];
			self.min_markup_limit_enabled = [[Soap getNodeValue: node withName: @"min_markup_limit_enabled"] boolValue];
			self.max_markup_limit_enabled = [[Soap getNodeValue: node withName: @"max_markup_limit_enabled"] boolValue];
			self.org_id = [[Soap getNodeValue: node withName: @"org_id"] intValue];
			self.scac = [Soap getNodeValue: node withName: @"scac"];
			self.min_margin = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"min_margin"]];
			self.max_margin = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"max_margin"]];
			self.weight_break_low = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"weight_break_low"]];
			self.weight_break_high = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"weight_break_high"]];
			self.effectivePricing = [[RSPEffectivePricing createWithNode: [Soap getNode: node withName: @"effectivePricing"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"PricingBase"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<cust_id>%@</cust_id>", [NSString stringWithFormat: @"%i", self.cust_id]];
		[s appendFormat: @"<contract_id>%@</contract_id>", [NSString stringWithFormat: @"%i", self.contract_id]];
		[s appendFormat: @"<active>%@</active>", (self.active)?@"true":@"false"];
		[s appendFormat: @"<benchmark>%@</benchmark>", (self.benchmark)?@"true":@"false"];
		[s appendFormat: @"<analysis>%@</analysis>", (self.analysis)?@"true":@"false"];
		if (self.standard_markup_percent != nil) [s appendFormat: @"<standard_markup_percent>%@</standard_markup_percent>", [NSString stringWithFormat: @"%@", self.standard_markup_percent]];
		if (self.standard_markup_dollar != nil) [s appendFormat: @"<standard_markup_dollar>%@</standard_markup_dollar>", [NSString stringWithFormat: @"%@", self.standard_markup_dollar]];
		if (self.flat_markup_percent != nil) [s appendFormat: @"<flat_markup_percent>%@</flat_markup_percent>", [NSString stringWithFormat: @"%@", self.flat_markup_percent]];
		if (self.flat_markup_dollar != nil) [s appendFormat: @"<flat_markup_dollar>%@</flat_markup_dollar>", [NSString stringWithFormat: @"%@", self.flat_markup_dollar]];
		if (self.min_markup_percent != nil) [s appendFormat: @"<min_markup_percent>%@</min_markup_percent>", [NSString stringWithFormat: @"%@", self.min_markup_percent]];
		if (self.min_markup_dollar != nil) [s appendFormat: @"<min_markup_dollar>%@</min_markup_dollar>", [NSString stringWithFormat: @"%@", self.min_markup_dollar]];
		if (self.max_markup_percent != nil) [s appendFormat: @"<max_markup_percent>%@</max_markup_percent>", [NSString stringWithFormat: @"%@", self.max_markup_percent]];
		if (self.max_markup_dollar != nil) [s appendFormat: @"<max_markup_dollar>%@</max_markup_dollar>", [NSString stringWithFormat: @"%@", self.max_markup_dollar]];
		[s appendFormat: @"<standard_markup_percent_applies>%@</standard_markup_percent_applies>", (self.standard_markup_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<flat_markup_percent_applies>%@</flat_markup_percent_applies>", (self.flat_markup_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<min_markup_percent_applies>%@</min_markup_percent_applies>", (self.min_markup_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<max_markup_percent_applies>%@</max_markup_percent_applies>", (self.max_markup_percent_applies)?@"true":@"false"];
		[s appendFormat: @"<contract_pricing_applies>%@</contract_pricing_applies>", (self.contract_pricing_applies)?@"true":@"false"];
		[s appendFormat: @"<min_markup_limit_enabled>%@</min_markup_limit_enabled>", (self.min_markup_limit_enabled)?@"true":@"false"];
		[s appendFormat: @"<max_markup_limit_enabled>%@</max_markup_limit_enabled>", (self.max_markup_limit_enabled)?@"true":@"false"];
		[s appendFormat: @"<org_id>%@</org_id>", [NSString stringWithFormat: @"%i", self.org_id]];
		if (self.scac != nil) [s appendFormat: @"<scac>%@</scac>", [[self.scac stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.min_margin != nil) [s appendFormat: @"<min_margin>%@</min_margin>", [NSString stringWithFormat: @"%@", self.min_margin]];
		if (self.max_margin != nil) [s appendFormat: @"<max_margin>%@</max_margin>", [NSString stringWithFormat: @"%@", self.max_margin]];
		if (self.weight_break_low != nil) [s appendFormat: @"<weight_break_low>%@</weight_break_low>", [NSString stringWithFormat: @"%@", self.weight_break_low]];
		if (self.weight_break_high != nil) [s appendFormat: @"<weight_break_high>%@</weight_break_high>", [NSString stringWithFormat: @"%@", self.weight_break_high]];
		if (self.effectivePricing != nil) [s appendString: [self.effectivePricing serialize: @"effectivePricing"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[RSPPricingBase class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
